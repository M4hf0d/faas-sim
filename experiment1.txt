=== RUNNING HYPOTHESIS TEST  ===
Hypothesis: LPLT reduces power consumption vs K8s baseline, but increases response times

=== POWER CONSUMPTION COMPARISON ===
Kubernetes average power: 3.2W
LPLT average power: 3.0W
Power savings: 7.1%

=== PERFORMANCE COMPARISON (ROBUST METRICS) ===
Kubernetes MEDIAN response time: 1063.046s
LPLT MEDIAN response time: 1224.196s
MEDIAN performance penalty: 15.2%
Kubernetes 95th percentile: 186129.810s
LPLT 95th percentile: 31392.186s
95th percentile penalty: -83.1%
Kubernetes warm-up avg: 35216.132s
LPLT warm-up avg: 7595.723s
Warm-up performance penalty: -78.4%

=== WAIT TIME ANALYSIS ===
/mnt/c/Users/masay/Documents/FaaS/FS/faas-sim/script.py:61: RuntimeWarning: invalid value encountered in double_scalars      
  wait_improvement = ((k8s_wait_median - lplt_wait_median) / k8s_wait_median) * 100
K8s median wait time: 0.000s
LPLT median wait time: 0.000s
Wait time improvement: nan%

=== REVISED HYPOTHESIS RESULT ===
âœ… HYPOTHESIS CONFIRMED (MEDIAN): LPLT saves 7.1% energy
   at the cost of 15.2% slower median response times

=== SUMMARY ===
Trade-off ratio: 7.1% energy savings for 15.2% performance cost

Plot saved as tradeoff_plot.png

"""
Analysis of Your Results
What's Working Well:
âœ… 7.1% power savings - Confirmed energy efficiency
âœ… 15.2% median response time increase - Reasonable performance trade-off
âœ… Stable trade-off ratio: ~2:1 (15.2% performance cost for 7.1% energy savings)
Concerning Anomalies:
ðŸš¨ 95th percentile: LPLT is actually 83% faster than K8s (31s vs 186s)
ðŸš¨ Warm-up times: LPLT is 78% faster than K8s (7.6s vs 35s)
ðŸš¨ Extreme response times: Both strategies show very high max times (30+ seconds)
What This Suggests
Your LPLT strategy appears to have better worst-case performance than Kubernetes, which is unexpected. This could indicate:

  K8s is over-scaling and causing resource contention
  LPLT's energy-aware decisions are actually avoiding performance bottlenecks
  Cold start problems are worse with K8s spreading across many nodes
  Node selection differences - LPLT's power-efficient nodes might be less congested

Validate Current Results First:
  Check node utilization: Is K8s spreading too much?
  Analyze cold starts: Are K8s nodes starting more replicas?
  Look at specific workloads: Which functions show the biggest differences?






Expected Insights Before Next Comparison
  If LPLT consistently outperforms K8s in extreme cases:
  Research angle: "Energy-aware scaling not only saves power but improves tail latency"
  Stronger hypothesis: LPLT avoids resource contention through smarter node selection
  If it's load-dependent:
  Research angle: "Sweet spot analysis - when does energy optimization help vs hurt performance"
  Load thresholds: Identify the RPS level where trade-offs flip
  Refined Hypothesis for Next Test
  "Under moderate load (15-25 RPS), LPLT provides energy savings with acceptable median performance penalty, while potentially improving worst-case performance through reduced resource contention."