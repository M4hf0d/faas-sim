=== RUNNING HYPOTHESIS TEST ===
Hypothesis: Kubernetes reduces power consumption vs LPLT baseline, but increases response times

=== POWER CONSUMPTION COMPARISON ===

üîã LPLT Workload Analysis:
  coral_1: 4 replicas √ó 2.50W = 10.0W
  coral_3: 4 replicas √ó 2.50W = 10.0W
  nano_12: 5 replicas √ó 2.02W = 10.1W
  nano_15: 4 replicas √ó 1.90W = 7.6W
  nano_17: 4 replicas √ó 1.91W = 7.6W
  nano_18: 4 replicas √ó 2.02W = 8.1W
  nano_19: 4 replicas √ó 2.02W = 8.1W
  nano_26: 4 replicas √ó 1.90W = 7.6W
  nano_3: 4 replicas √ó 1.91W = 7.6W
  nano_9: 5 replicas √ó 2.02W = 10.1W
  nx_10: 8 replicas √ó 5.01W = 40.1W
  nx_11: 45 replicas √ó 5.68W = 255.8W
  nx_13: 69 replicas √ó 5.39W = 371.6W
  nx_3: 8 replicas √ó 5.03W = 40.3W
  nx_4: 70 replicas √ó 5.64W = 394.9W
  nx_7: 85 replicas √ó 5.64W = 479.6W
  rockpi_0: 65 replicas √ó 3.08W = 200.2W
  rockpi_10: 75 replicas √ó 3.08W = 230.6W
  rockpi_11: 10 replicas √ó 3.12W = 31.2W
  rockpi_12: 8 replicas √ó 3.04W = 24.3W
  rockpi_13: 8 replicas √ó 3.04W = 24.3W
  rockpi_14: 44 replicas √ó 3.08W = 135.3W
  rockpi_16: 74 replicas √ó 3.04W = 225.3W
  rockpi_19: 123 replicas √ó 3.04W = 374.5W
  rockpi_21: 88 replicas √ó 3.04W = 267.5W
  rockpi_23: 20 replicas √ó 3.12W = 62.3W
  rockpi_28: 55 replicas √ó 3.08W = 169.4W
  rockpi_30: 8 replicas √ó 3.00W = 24.0W
  rockpi_4: 35 replicas √ó 3.08W = 107.8W
  rockpi_5: 8 replicas √ó 3.04W = 24.3W
  rockpi_8: 8 replicas √ó 3.00W = 24.0W
  rpi3_0: 20 replicas √ó 2.14W = 42.7W
  rpi3_1: 15 replicas √ó 2.14W = 32.1W
  rpi3_2: 15 replicas √ó 2.15W = 32.2W
  rpi3_21: 9 replicas √ó 2.11W = 18.9W
  rpi3_22: 30 replicas √ó 2.11W = 63.3W
  rpi3_23: 25 replicas √ó 2.12W = 52.9W
  rpi3_27: 35 replicas √ó 2.12W = 74.2W
  rpi3_28: 30 replicas √ó 2.13W = 63.8W
  rpi3_29: 30 replicas √ó 2.13W = 63.9W
  rpi3_3: 4 replicas √ó 2.10W = 8.4W
  rpi3_4: 4 replicas √ó 2.10W = 8.4W
  rpi3_5: 8 replicas √ó 2.10W = 16.8W
  rpi3_9: 5 replicas √ó 2.15W = 10.8W
  Total: 4082.7W across 1186 replicas = 3.44W/replica

üîã Kubernetes Workload Analysis:
  coral_0: 5 replicas √ó 2.67W = 13.4W
  coral_1: 4 replicas √ó 2.50W = 10.0W
  coral_3: 4 replicas √ó 2.50W = 10.0W
  nano_0: 15 replicas √ó 2.28W = 34.2W
  nano_1: 5 replicas √ó 2.32W = 11.6W
  nano_10: 25 replicas √ó 2.02W = 50.6W
  nano_11: 15 replicas √ó 2.28W = 34.2W
  nano_12: 45 replicas √ó 1.97W = 88.7W
  nano_15: 4 replicas √ó 1.90W = 7.6W
  nano_17: 4 replicas √ó 1.91W = 7.6W
  nano_18: 4 replicas √ó 1.96W = 7.9W
  nano_19: 4 replicas √ó 1.96W = 7.9W
  nano_2: 5 replicas √ó 2.32W = 11.6W
  nano_20: 45 replicas √ó 2.02W = 90.7W
  nano_21: 45 replicas √ó 2.02W = 90.7W
  nano_22: 25 replicas √ó 2.02W = 50.6W
  nano_26: 4 replicas √ó 1.90W = 7.6W
  nano_28: 15 replicas √ó 2.28W = 34.2W
  nano_3: 4 replicas √ó 1.91W = 7.6W
  nano_5: 5 replicas √ó 2.32W = 11.6W
  nano_6: 5 replicas √ó 2.33W = 11.7W
  nano_9: 45 replicas √ó 1.97W = 88.7W
  nx_10: 8 replicas √ó 5.01W = 40.1W
  nx_11: 45 replicas √ó 5.71W = 257.0W
  nx_12: 5 replicas √ó 7.51W = 37.5W
  nx_13: 84 replicas √ó 5.37W = 450.9W
  nx_3: 8 replicas √ó 5.03W = 40.3W
  nx_4: 49 replicas √ó 5.41W = 265.1W
  nx_5: 5 replicas √ó 7.51W = 37.5W
  nx_7: 80 replicas √ó 5.67W = 453.4W
  rockpi_0: 70 replicas √ó 3.08W = 215.6W
  rockpi_1: 10 replicas √ó 3.29W = 32.9W
  rockpi_10: 90 replicas √ó 3.08W = 276.8W
  rockpi_11: 10 replicas √ó 3.28W = 32.8W
  rockpi_12: 8 replicas √ó 3.04W = 24.3W
  rockpi_13: 8 replicas √ó 3.04W = 24.3W
  rockpi_14: 90 replicas √ó 3.08W = 276.8W
  rockpi_16: 99 replicas √ó 3.04W = 301.5W
  rockpi_19: 128 replicas √ó 3.04W = 389.8W
  rockpi_2: 5 replicas √ó 3.29W = 16.4W
  rockpi_21: 88 replicas √ó 3.04W = 267.5W
  rockpi_23: 15 replicas √ó 3.28W = 49.3W
  rockpi_25: 10 replicas √ó 3.29W = 32.9W
  rockpi_28: 45 replicas √ó 3.08W = 138.6W
  rockpi_30: 8 replicas √ó 3.00W = 24.0W
  rockpi_4: 30 replicas √ó 3.25W = 97.6W
  rockpi_5: 8 replicas √ó 3.04W = 24.3W
  rockpi_8: 8 replicas √ó 3.00W = 24.0W
  rpi3_0: 15 replicas √ó 2.23W = 33.5W
  rpi3_1: 15 replicas √ó 2.23W = 33.5W
  rpi3_2: 10 replicas √ó 2.23W = 22.3W
  rpi3_21: 50 replicas √ó 2.14W = 107.0W
  rpi3_22: 50 replicas √ó 2.14W = 107.0W
  rpi3_23: 50 replicas √ó 2.14W = 107.0W
  rpi3_27: 25 replicas √ó 2.14W = 53.5W
  rpi3_28: 35 replicas √ó 2.14W = 75.0W
  rpi3_29: 30 replicas √ó 2.14W = 64.3W
  rpi3_3: 4 replicas √ó 2.10W = 8.4W
  rpi3_4: 4 replicas √ó 2.10W = 8.4W
  rpi3_5: 8 replicas √ó 2.10W = 16.8W
  Total: 5156.3W across 1642 replicas = 3.14W/replica
üìä TOTAL INFRASTRUCTURE POWER:
LPLT average total system power: 461.1W
Kubernetes average total system power: 448.7W
Infrastructure power savings: 2.7%

‚ö° WORKLOAD ENERGY EFFICIENCY:
LPLT: 3.44W per replica
Kubernetes: 3.14W per replica
Workload efficiency improvement: 8.8%
‚úÖ Kubernetes is more energy-efficient per replica

=== PERFORMANCE COMPARISON ===
LPLT MEDIAN response time: 1415.915s
Kubernetes MEDIAN response time: 1266.697s
MEDIAN performance penalty: -10.5%
LPLT 95th percentile: 25520.671s
Kubernetes 95th percentile: 38394.312s
95th percentile penalty: 50.4%
LPLT warm-up avg: 12066.318s
Kubernetes warm-up avg: 9788.810s
Warm-up performance penalty: -18.9%

=== WAIT TIME ANALYSIS ===
LPLT median wait time: 0.000s
Kubernetes median wait time: 0.000s
Wait time improvement: 0.0%

=== REVISED HYPOTHESIS RESULT ===
üéâ UNEXPECTED RESULT: Kubernetes saves 2.7% infrastructure power
   and 8.8% workload efficiency
   AND improves median response times by 10.5%!
   This suggests Kubernetes strategy is superior in both dimensions
üîç DEEP ANALYSIS: Understanding Why Kubernetes Compares to LPLT

=== NODE DISTRIBUTION ANALYSIS ===
LPLT uses 44 unique nodes
Kubernetes uses 60 unique nodes
Node spreading difference: -16

LPLT node load distribution:
  Average replicas per node: 27.0
  Max replicas on one node: 123
  Min replicas on one node: 4

Kubernetes node load distribution:
  Average replicas per node: 27.4
  Max replicas on one node: 128
  Min replicas on one node: 4

Consolidation factor: 1.02
‚û°Ô∏è Similar distribution patterns
=== COLD START ANALYSIS ===
LPLT scheduling success rate: 1.0
Kubernetes scheduling success rate: 1.0

Cold start execution times:
LPLT early median t_exec: 0.989s
Kubernetes early median t_exec: 0.910s
‚úÖ Kubernetes has 8.0% faster cold starts

Total scheduling events:
LPLT: 732 scheduling events
Kubernetes: 1005 scheduling events
=== WORKLOAD-SPECIFIC PERFORMANCE ===

resnet50-inference (6942 vs 6942 samples):
  Median: LPLT=0.561s, Kubernetes=0.669s (+19.1%)
  P95: LPLT=1.579s, Kubernetes=0.834s (-47.2%)

fio (1120 vs 174 samples):
  Median: LPLT=207.821s, Kubernetes=291.657s (+40.3%)
  P95: LPLT=503.322s, Kubernetes=544.485s (+8.2%)

speech-inference (1648 vs 1648 samples):
  Median: LPLT=3.819s, Kubernetes=3.822s (+0.1%)
  P95: LPLT=21.352s, Kubernetes=22.004s (+3.1%)

python-pi (8663 vs 8663 samples):
  Median: LPLT=1.287s, Kubernetes=0.938s (-27.1%)
  P95: LPLT=32.646s, Kubernetes=34.044s (+4.3%)
=== SCALING DECISION ANALYSIS ===
LPLT scaling actions:
  Scale up: 227
  Scale down: 819
  No action: 1017
  Total actions: 1046

Kubernetes scaling actions:
  Scale up: 318
  Scale down: 842
  No action: 903
  Total actions: 1160

High response time events (>1s):
LPLT: 236 events
Kubernetes: 230 events

Node type selection frequency:
LPLT preferences:
  rpi3: 227
Kubernetes preferences:
  nuc: 235
  rockpi: 54
  nx: 29
=== RESOURCE CONTENTION ANALYSIS ===
LPLT average utilization by node type:
           cpu_util  memory_util
node_type                       
coral      0.060000     0.050000
nano       0.148559     0.111419
nuc        0.120000     0.100000
nx         0.151054     0.108759
rockpi     0.072110     0.060092
rpi3       0.079672     0.066393

Kubernetes average utilization by node type:
           cpu_util  memory_util
node_type                       
coral      0.044262     0.036885
nano       0.096586     0.072439
nuc        0.120000     0.100000
nx         0.131821     0.094911
rockpi     0.069529     0.057941
rpi3       0.086721     0.072268

High CPU utilization events (>90%):
LPLT: 0 events
Kubernetes: 0 events

Average power per active node:
LPLT: 3.84W
Kubernetes: 3.74W

==================================================
HYPOTHESIS VALIDATION SUMMARY
==================================================
‚úÖ H2: Kubernetes has faster cold start performance

============================================================
üîç DETAILED WORKLOAD ANALYSIS VALIDATION
==================================================

üìä LPLT Detailed Breakdown:
Workload distribution by node type:
  rockpi: 629 replicas √ó 3.37W = 2117.6W
  nx: 285 replicas √ó 8.15W = 2323.9W
  rpi3: 230 replicas √ó 2.31W = 531.6W
  nano: 34 replicas √ó 2.57W = 87.3W
  coral: 8 replicas √ó 2.68W = 21.4W

LPLT Summary:
  Total replicas: 1186
  Total workload power: 4082.7W
  Average efficiency: 3.442W per replica
  Unique nodes used: 21

üìä Kubernetes Detailed Breakdown:
Workload distribution by node type:
  rockpi: 730 replicas √ó 3.35W = 2448.0W
  nano: 319 replicas √ó 2.33W = 744.7W
  rpi3: 296 replicas √ó 2.33W = 689.6W
  nx: 284 replicas √ó 7.75W = 2201.7W
  coral: 13 replicas √ó 2.63W = 34.2W

Kubernetes Summary:
  Total replicas: 1642
  Total workload power: 5156.3W
  Average efficiency: 3.140W per replica
  Unique nodes used: 18

üéØ COMPARATIVE ANALYSIS:
Workload efficiency improvement: 8.8%
Total workload power reduction: -26.3%
Replica count difference: 1186 vs 1642

‚úÖ VALIDATION CHECKS:
‚úì Kubernetes has better energy efficiency per replica
‚úó LPLT uses less total workload power

=== SUMMARY ===
Infrastructure power savings: 2.7%
Workload efficiency improvement: 8.8%
Performance trade-off: -10.5% response time penalty
Plot saved as tradeoff_plot.png
